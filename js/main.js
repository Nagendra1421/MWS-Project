let restaurants, neighborhoods, cuisines;var mMap;var markers = [];const MAPBOX_API_KEY = "pk.eyJ1IjoiaXN0aWFxdWUxOCIsImEiOiJjampjbzhxYnEyM3ZlM3Z0ZWRncHVsOXEyIn0.G92w014uYkp64EiGScJH8Q";document.addEventListener("DOMContentLoaded", event => {if (navigator.serviceWorker) {navigator.serviceWorker .register("./sw.js").then(registration => console.log("SW registered", registration)).catch(e => console.log("Registration failed :(", e));}initMap();fetchNeighborhoods();fetchCuisines();});fetchNeighborhoods = () => {DBHelper.fetchNeighborhoods((error, neighborhoods) => {if (error){console.error(error);} else {self.neighborhoods = neighborhoods;fillNeighborhoodsHTML();}});};fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {
const select = document.getElementById('neighborhoods-select');neighborhoods.forEach(neighborhood => {const option = document.createElement('option');option.innerHTML = neighborhood;option.value = neighborhood;select.append(option);});};fetchCuisines = () => {DBHelper.fetchCuisines((error, cuisines) => {if (error) {console.error(error);} else {self.cuisines = cuisines;fillCuisinesHTML();}});};fillCuisinesHTML = (cuisines = self.cuisines) => {const select = document.getElementById('cuisines-select');cuisines.forEach(cuisine => {const option = document.createElement('option');option.innerHTML = cuisine;option.value = cuisine;select.append(option);});};
initMap = () => {self.mMap = L.map('map', {center: [40.722216, -73.987501],zoom: 12,scrollWheelZoom: false,zoomControl:false});L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {mapboxToken: MAPBOX_API_KEY,maxZoom: 18,attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, '+'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id: 'mapbox.streets'}).addTo(mMap);updateRestaurants();};updateRestaurants = () => {const cSelect = document.getElementById('cuisines-select');const nSelect = document.getElementById('neighborhoods-select');const cIndex = cSelect.selectedIndex;const nIndex = nSelect.selectedIndex;const cuisine = cSelect[cIndex].value;const neighborhood = nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {if (error) {console.error(error);} else {resetRestaurants(restaurants);fillRestaurantsHTML();}})};resetRestaurants = restaurants => {self.restaurants = [];const ul = document.getElementById("restaurants-list");ul.innerHTML = "";self.markers.forEach(m => m.remove());self.markers = [];self.restaurants = restaurants;};
fillRestaurantsHTML = (restaurants = self.restaurants) => {const ul = document.getElementById('restaurants-list');restaurants.forEach(restaurant => {ul.append(createRestaurantHTML(restaurant));});addMarkersToMap();};createRestaurantHTML = restaurant => {const li = document.createElement("li");li.setAttribute("aria-label", "restaurant details");const container_div=document.createElement("div");container_div.className="container";const image = document.createElement("img");image.alt = `${restaurant.name} restaurant, ${restaurant.shortDesc}`;image.className = "lazyload restaurant-img";image.src = imageUrlForRestaurant(restaurant,360,true);image.setAttribute("data-src", imageUrlForRestaurant(restaurant, 360));image.tabIndex = 0;container_div.append(image);li.appendChild(container_div);const favoriteIconImg=document.createElement('img');if (restaurant.is_favorite === "true") {favoriteIconImg.alt = 'Favorited ' + restaurant.name;favoriteIconImg.setAttribute("src", './img/ico-fav.png');favoriteIconImg.className = 'restaurant-fav-icon fav';favoriteIconImg.alt="Favorite Restaurant";} else {favoriteIconImg.setAttribute("src", './img/ico-fav-o.png');favoriteIconImg.className = 'restaurant-fav-icon fav-not';favoriteIconImg.alt="Normal Restaurant";}favoriteIconImg.addEventListener('click', () => {const src = favoriteIconImg.src;if (src.includes('img/ico-fav-o.png')) {DBHelper.addRestaurantToFavorites(restaurant.id, true, (err, res) => {favoriteIconImg.src = './img/ico-fav.png';});} else {DBHelper.addRestaurantToFavorites(restaurant.id, false, (err, res) => {favoriteIconImg.src = './img/ico-fav-o.png';});}});container_div.append(favoriteIconImg);const rest_container=document.createElement("div");rest_container.className="rest_container";li.append(rest_container);const rest_icon=document.createElement("img");rest_icon.className="restaurant-icon";rest_icon.src="./img/restaurant.svg";rest_icon.alt="restaurant_icon";rest_container.append(rest_icon);const name = document.createElement("h3");name.className="rest_name";name.innerHTML = restaurant.name;rest_container.append(name); const neighborhood = document.createElement("p");neighborhood.innerHTML = restaurant.neighborhood;li.append(neighborhood);const address = document.createElement("p");address.innerHTML = restaurant.address;li.append(address);const more = document.createElement("a");more.setAttribute("aria-label",restaurant.name + ", " + restaurant.neighborhood);more.setAttribute('role', 'button');more.setAttribute('aria-pressed', 'false');more.innerHTML = "View Details";more.href =urlForRestaurant(restaurant);li.append(more);return li;};addMarkersToMap = (restaurants = self.restaurants) => {restaurants.forEach(restaurant => {const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.mMap);marker.on("click",onClick);function onClick(){window.location.href=marker.options.url;}self.markers.push(marker);});};handleBtnClick = (event) => {toggleButton(event.target);};handleBtnKeyPress = (event) => {if (event.key === " " || event.key === "Enter") {event.preventDefault();toggleButton(event.target);}};toggleButton = (element) => {var pressed = (element.getAttribute("aria-pressed") === "true");element.setAttribute("aria-pressed", !pressed);};
