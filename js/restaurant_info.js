let restaurant;var mMap;const MAPBOX_API_KEY="pk.eyJ1IjoiaXN0aWFxdWUxOCIsImEiOiJjampjbzhxYnEyM3ZlM3Z0ZWRncHVsOXEyIn0.G92w014uYkp64EiGScJH8Q";var ratings ={Value1 : 'Select Rating',Value2 : '1',Value3 : '2',Value4:'3',Value5:'4',Value6:'5'};
document.addEventListener("DOMContentLoaded", event => {initMap();if (navigator.serviceWorker) {navigator.serviceWorker .register("./sw.js").then(registration => console.log("SW registered", registration)).catch(e => console.log("Registration failed :(", e));}});
initMap=()=>{ fetchRestaurantFromURL((error, restaurant) => {if (error) {console.error(error);} else {self.mMap = L.map('map', {center: [restaurant.latlng.lat, restaurant.latlng.lng],zoom: 16,scrollWheelZoom: false,zoomControl:false});L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {mapboxToken: MAPBOX_API_KEY,maxZoom: 18,attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id: 'mapbox.streets'}).addTo(mMap);fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant, self.mMap);addCachedReviewsToServer();}});};
fetchRestaurantFromURL=callback=>{  if (self.restaurant) {callback(null, self.restaurant);return;}const id = getParameterByName("id");if (!id) {error = "No restaurant id in URL";callback(error, null);} else {
DBHelper.fetchRestaurantById(id, (error, restaurant) => {self.restaurant = restaurant;if (!restaurant) {console.error(error);return;}fillRestaurantHTML();callback(null, restaurant);});}};
fillRestaurantHTML = (restaurant = self.restaurant) => {const name = document.getElementById("restaurant-name");name.innerHTML = restaurant.name;const address = document.getElementById("restaurant-address");address.innerHTML = restaurant.address;const image = document.getElementById("restaurant-img");image.className = "restaurant-img";image.src = imageUrlForRestaurant(restaurant,360);const cuisine = document.getElementById("restaurant-cuisine");cuisine.innerHTML = restaurant.cuisine_type;if (restaurant.operating_hours) {fillRestaurantHoursHTML();}fetchReviewsFromURL();};const fetchReviewsFromURL = (callback) => {if (self.reviews) {callback(null, self.reviews);return;}const id = getParameterByName('id');if (!id) {error = 'No review id in URL';callback(error, null);} else {DBHelper.fetchReviewsByRestaurantId(id, (error, reviews) => {self.reviews = reviews;if (!reviews) {fillReviewsHTML(null);return;}fillReviewsHTML();});}}
fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {const hours = document.getElementById("restaurant-hours");for (let key in operatingHours) {const row = document.createElement("tr");
const day = document.createElement("td");day.innerHTML = key;row.appendChild(day);const time = document.createElement("td");time.innerHTML = operatingHours[key];row.appendChild(time);hours.appendChild(row);}};
const addCachedReviewsToServer = () => {const dbName = 'newReviewsDB';const dbVersion = 12;var request = indexedDB.open(dbName, dbVersion);request.onerror = function (event) {console.log('indexedDB error: ' + this.error);};request.onupgradeneeded = function (event) {console.log('onupgradeneeded request triggered: ' + event);var db = event.target.result;db.onerror = function (event) {console.log('Error loading database');};
db.onversionchange = function (event) {console.log('version changed, user should be informed, db:' + dbName);};var objectStore = db.createObjectStore('NewReview', {keyPath: 'name'});console.log('onupgradeneeded event triggered, object store restaurants created');};request.onsuccess = function (event) {var db = event.target.result;db.onerror = function (event) {console.log('Database error: ' + event.target.errorCode);};var transaction = db.transaction('NewReview', 'readwrite');
var objectStore = transaction.objectStore('NewReview');	objectStore.openCursor().onsuccess = function (event) {var cursor = event.target.result;if (cursor) {console.log('restaurant_id for review key: ' + cursor.key + ' is ' + cursor.value.restaurant_id);const currentRestaurantID = cursor.value.restaurant_id;const name = cursor.value.name;const rating = cursor.value.rating;const comments = cursor.value.comments;const objNewReview = {restaurant_id: currentRestaurantID,name: name,rating: rating,comments: comments}
postData(objNewReview).then(data => {console.log('restaurant id ' + currentRestaurantID + ' added to db from idb');}).catch(error => {console.log(error);});var objectStoreRequest = objectStore.delete(cursor.key);objectStoreRequest.onsuccess = function (event) {console.log('entry deleted, key: ' + cursor.key);};cursor.continue();
}else {console.log('No more entries from idb to post!');}};}};fillReviewsHTML = (reviews = self.reviews) => {const container = document.getElementById("reviews-container");const title = document.createElement("h4");title.id="review_title";title.innerHTML = "Reviews";if(document.contains(document.getElementById("review_title"))){document.getElementById("review_title").remove();}container.appendChild(title);const addReview=document.createElement("button");addReview.className="add_review";addReview.innerHTML='Add Review';container.appendChild(addReview);const modal_container=document.createElement('div');modal_container.id="reviewModal";modal_container.className="modal";const div_container=document.createElement('div');div_container.className="modal-content";const close_icon=document.createElement('span');close_icon.className="closeIcon";close_icon.innerHTML="&times;";div_container.appendChild(close_icon);close_icon.addEventListener('click',()=>{document.getElementById('reviewModal').style.display='none'; });const form_container=document.createElement('div');form_container.className="form-review";const input_name=document.createElement('input');input_name.type="text";input_name.placeholder="Enter Your Name";input_name.id="review-name";form_container.appendChild(input_name);const select_rating=document.createElement('select');select_rating.id='review-rating';for(index in ratings){select_rating.options[select_rating.options.length]=new Option(ratings[index],index);}form_container.appendChild(select_rating);const text_comments=document.createElement('textarea');text_comments.id='review-comment';text_comments.rows="5";text_comments.placeholder="Tell us what you think";text_comments.name="review-comment";form_container.appendChild(text_comments);const submit_btn=document.createElement('button');submit_btn.innerHTML="Submit";submit_btn.className="submit-data";form_container.appendChild(submit_btn);submit_btn.addEventListener('click',()=>{let id=getParameterByName("id");let name=document.getElementById("review-name").value;let rating=select_rating.options[select_rating.selectedIndex].text;let message=document.getElementById("review-comment").value;if(navigator.onLine){if(name!="" && message!=""){let review={restaurant_id:id,name:name,rating:rating,comments:message};postData(review).then(data => {window.location.reload();}).catch(error => {console.log(error);})        }  }else{alert('You are offline. Your review will be saved. When you are online again it will be reposted by itself!');if(name!="" && message!=""){let review={restaurant_id:id,name:name,rating:rating,comments:message};cachePostToIdb(review);}document.getElementById('reviewModal').style.display='none'; }});div_container.appendChild(form_container);modal_container.appendChild(div_container);container.appendChild(modal_container);addReview.addEventListener('click',()=>{document.getElementById('body').style.overflow='hidden';document.getElementById('reviewModal').style.display='block';});if (!reviews) {const noReviews = document.createElement("p");noReviews.innerHTML = "No reviews yet!";container.appendChild(noReviews);return;}const ul = document.getElementById("reviews-list");reviews.forEach(review => {ul.appendChild(createReviewHTML(review));});container.appendChild(ul);};postData=(data)=>{return fetch(`${DBHelper.DATABASE_URL}/reviews`, {method: 'POST',body: JSON.stringify(data),headers: {'content-type': 'application/json'}}).then(response => {response.json}).catch((error) => {console.log('Could not create the review, error: ' + error);}).then(response => console.log('Review created'));};cachePostToIdb=(objNewReview)=> {console.log('start saving to indexeddb');const dbName = 'newReviewsDB';const dbVersion = 12;var request = indexedDB.open(dbName, dbVersion);request.onerror = function (event) {console.log('indexedDB error for newReviewsDB: ' + this.error);};request.onsuccess = function (event) {console.log('Database newReviews initialised succesfully');var db = event.target.result;db.onerror = function (event) {console.log('Database newReview error: ' + event.target.errorCode);};var transaction = db.transaction(['NewReview'], 'readwrite');var objectStore = transaction.objectStore('NewReview');objectStore.put(objNewReview);transaction.oncomplete = function () {console.log('Transaction completed: database modification finished');};transaction.onerror = function () {console.log('Transaction not opened due to error: ' + transaction.error);};console.log('REPORT ///////////////////////////////');console.log('objectStore indexNames: ' + objectStore.indexNames);console.log('objectStore keyPath: ' + objectStore.keyPath);console.log('objectStore name: ' + objectStore.name);console.log('objectStore transaction: ' + objectStore.transaction);console.log('objectStore autoIncrement: ' + objectStore.autoIncrement);};request.onupgradeneeded = function (event) {console.log('onupgradeneeded request triggered: ' + event);var db = event.target.result;db.onerror = function (event) {console.log('Error loading database');};db.onversionchange = function (event) {console.log('version changed, user should be informed');};var objectStore = db.createObjectStore('NewReview', {keyPath: 'name'});console.log('onupgradeneeded event triggered, object store restaurants created');};};createReviewHTML = review => {const li = document.createElement("li");const name = document.createElement("p");name.innerHTML = review.name;li.appendChild(name);const date = document.createElement("p");date.innerHTML = review.date;li.appendChild(date);const rating = document.createElement("p");rating.innerHTML = `Rating: ${review.rating}`;li.appendChild(rating);const comments = document.createElement("p");comments.innerHTML = review.comments;li.appendChild(comments);return li;};fillBreadcrumb = (restaurant = self.restaurant) => {const breadcrumb = document.getElementById("breadcrumb");const li = document.createElement("li");li.innerHTML = restaurant.name;li.setAttribute("aria-current", "page");breadcrumb.appendChild(li);};getParameterByName = (name, url) => {if (!url) url = window.location.href;name = name.replace(/[\[\]]/g, "\\$&");const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results = regex.exec(url);if (!results) return null;if (!results[2]) return "";return decodeURIComponent(results[2].replace(/\+/g, " "));};
