class DBHelper{static get DATABASE_URL(){const port = 1337;return `http://localhost:${port}`;}static createRestaurantsStore(restaurants) {var indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;    var open = indexedDB.open("RestaurantDB", 1);    open.onupgradeneeded = function() {var db = open.result;db.createObjectStore("RestaurantStore", { keyPath: "id" });restaurants.forEach(function(restaurant) {db.createObjectStore("ReviewsStore-" + restaurant.id, { keyPath: "id" });});};    open.onerror = function(err) {console.error("Something went wrong with IndexDB: " + err.target.errorCode);}
open.onsuccess = function() {var db = open.result;var tx = db.transaction("RestaurantStore", "readwrite");var store = tx.objectStore("RestaurantStore");restaurants.forEach(function(restaurant) {store.put(restaurant);});tx.oncomplete = function() {db.close();};}}static createReviewsStore(restaurantId, reviews) {var indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;var open = indexedDB.open("RestaurantDB", 1);open.onupgradeneeded = function() {var db = open.result;db.createObjectStore("ReviewsStore-" + restaurantId, { keyPath: "id" });};    open.onerror = function(err) {console.error("Something went wrong with IndexDB: " + err.target.errorCode);}
open.onsuccess = function() {var db = open.result;var tx = db.transaction("ReviewsStore-" + restaurantId, "readwrite");var store = tx.objectStore("ReviewsStore-" + restaurantId);reviews.forEach(function(review) {store.put(review);});tx.oncomplete = function() {db.close();};}}static getCachedData(callback) {var restaurants = [];var indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;var open = indexedDB.open("RestaurantDB", 1);open.onsuccess = function() {var db = open.result;var tx = db.transaction("RestaurantStore", "readwrite");var store = tx.objectStore("RestaurantStore");var getData = store.getAll();getData.onsuccess = function() {callback(null, getData.result);};tx.oncomplete = function(){db.close();};} }static fetchRestaurants(callback) {if (navigator.onLine) {fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(res => res.json()).then(restaurants => {DBHelper.createRestaurantsStore(restaurants);callback(null, restaurants);}).catch(err => {const error = `Request failed. Returned status of ${err.status}`;callback(error, null);})} else {console.log('Browser Offline - Using cached data!');DBHelper.getCachedData((error, restaurants) => {if (restaurants.length > 0) {callback(null, restaurants);}});}}static fetchReviews(callback) {const url = DBHelper.DATABASE_URL + '/reviews';fetch(url).then(res => res.json()).then(reviews => {callback(null, reviews);}).catch(err => {const error = `Request failed. Returned status of ${err.status}`;callback(error, null);})}static fetchReviewsByRestaurantId(id, callback) {const url = DBHelper.DATABASE_URL + '/reviews/?restaurant_id=' + id;fetch(url).then(res => res.json()).then(reviews => {reviews = reviews.sort(function(a, b) {return new Date(b.createdAt) - new Date(a.createdAt);});DBHelper.createReviewsStore(id, reviews);callback(null, reviews);}).catch(err => {const error = `Request failed. Returned status of ${err.status}`;callback(error, null);})}static addRestaurantToFavorites(restaurantId, isFav, callback) {const url = DBHelper.DATABASE_URL + '/restaurants/' + restaurantId + '/?is_favorite=' + isFav;fetch(url, { method: 'put' }).then(res => callback(null, 1)).catch(err => callback(err, null));}static fetchRestaurantById(id, callback) {DBHelper.fetchRestaurants((error, restaurants) => {if (error) {callback(error, null);} else {const restaurant = restaurants.find(r => r.id == id);if (restaurant) {callback(null, restaurant);}else{callback('Restaurant does not exist', null);}}});}static fetchRestaurantByCuisine(cuisine, callback) {DBHelper.fetchRestaurants((error, restaurants) => {if (error) {callback(error, null);} else {const results = restaurants.filter(r => r.cuisine_type == cuisine);callback(null, results);}});}static fetchRestaurantByNeighborhood(neighborhood, callback) {DBHelper.fetchRestaurants((error, restaurants) => {if (error) {callback(error, null);} else {const results = restaurants.filter(r => r.neighborhood == neighborhood);callback(null, results);}});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {DBHelper.fetchRestaurants((error, restaurants) => {if (error) {callback(error, null);} else {let results = restaurants;if (cuisine != 'all') {results = results.filter(r => r.cuisine_type == cuisine);}if (neighborhood != 'all'){results = results.filter(r => r.neighborhood == neighborhood);}callback(null, results);}});}static fetchNeighborhoods(callback) {DBHelper.fetchRestaurants((error, restaurants) => {if (error) {callback(error, null);} else {const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);callback(null, uniqueNeighborhoods);}});}static fetchCuisines(callback){DBHelper.fetchRestaurants((error, restaurants) => {if(error){callback(error, null);}else{const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);callback(null, uniqueCuisines);}});}static urlForRestaurant(restaurant){return (`./restaurant.html?id=${restaurant.id}`);}static imageUrlForRestaurant(restaurant){return (`./img/${restaurant.photograph}.webp`);}static mapMarkerForRestaurant(restaurant, map) {const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],{title: restaurant.name,alt: restaurant.name,url: DBHelper.urlForRestaurant(restaurant)});marker.addTo(mMap);return marker;}}

